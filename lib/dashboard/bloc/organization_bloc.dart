// lib/dashboard/bloc/organization_bloc.dart

import 'dart:async';
import 'dart:convert';
import 'dart:developer' as developer;

import 'package:bloc/bloc.dart';
import 'package:flutter/services.dart';
import 'package:web3dart/web3dart.dart';

import '../../../auth/service/auth_service.dart';
import '../model/organization.dart';
import '../model/user.dart';

part 'organization_event.dart';
part 'organization_state.dart';

class OrganizationBloc extends Bloc<OrganizationEvent, OrganizationState> {
  final Web3Client web3client;
  final EthPrivateKey credentials;
  // Gi·∫£ s·ª≠ authService ƒë∆∞·ª£c cung c·∫•p qua DI ho·∫∑c m·ªôt c√°ch n√†o ƒë√≥
  final AuthService authService = AuthService();

  late DeployedContract deployedContract;
  bool _isContractLoaded = false;

  late ContractFunction _getUserFunction;
  late ContractFunction _getOrganizationFunction;
  late ContractFunction _addMemberFunction;
  late ContractFunction _isRegisteredFunction;
  late ContractFunction _removeMemberFunction;

  OrganizationBloc({required this.web3client, required this.credentials})
    : super(OrganizationInitial()) {
    on<FetchOrganizationDetails>(_onFetchDetails);
    on<AddMemberToOrganization>(_onAddMember);
    on<AddMemberByEmail>(_onAddMemberByEmail);
    on<RemoveMemberFromOrganization>(_onRemoveMember);
  }

  Future<void> _initializeContract() async {
    if (_isContractLoaded) return;

    final abiString = await rootBundle.loadString("build/contracts/Chain.json");
    final jsonAbi = jsonDecode(abiString);

    if (!jsonAbi.containsKey('abi') || !jsonAbi.containsKey('networks')) {
      throw Exception("‚ùå L·ªói file ABI: Thi·∫øu 'abi' ho·∫∑c 'networks'.");
    }

    final abi = ContractAbi.fromJson(jsonEncode(jsonAbi['abi']), 'Chain');
    final networks = jsonAbi['networks'] as Map<String, dynamic>;

    if (networks.isEmpty) {
      throw Exception(
        "‚ùå L·ªói file ABI: Kh√¥ng t√¨m th·∫•y network. B·∫°n ƒë√£ deploy contract v√† copy file JSON m·ªõi ch∆∞a?",
      );
    }

    final networkKey = networks.keys.first;
    final contractAddressHex = networks[networkKey]['address'] as String?;
    if (contractAddressHex == null || contractAddressHex.isEmpty) {
      throw Exception("‚ùå L·ªói file ABI: Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ contract.");
    }

    final contractAddress = EthereumAddress.fromHex(contractAddressHex);
    deployedContract = DeployedContract(abi, contractAddress);
    developer.log("üìå [OrgBloc] Contract ƒë√£ ƒë∆∞·ª£c load t·∫°i: $contractAddress");

    _getUserFunction = deployedContract.function('getUser');
    _isRegisteredFunction = deployedContract.function('isRegisteredAuth');
    _getOrganizationFunction = deployedContract.function('getOrganization');
    _addMemberFunction = deployedContract.function(
      'addAssociateToOrganization',
    );
    _removeMemberFunction = deployedContract.function(
      'removeAssociateFromOrganization',
    );

    _isContractLoaded = true;
  }

  Future<void> _checkIsOrganizationOwner() async {
    final address = credentials.address;

    final isRegisteredResult = await web3client.call(
      contract: deployedContract,
      function: _isRegisteredFunction,
      params: [address],
    );
    if (isRegisteredResult.isEmpty || !(isRegisteredResult.first as bool)) {
      throw Exception("‚ùå T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω.");
    }

    final userData = await web3client.call(
      contract: deployedContract,
      function: _getUserFunction,
      params: [address],
    );

    if (userData.isEmpty) {
      throw Exception("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ blockchain.");
    }

    final userStruct = userData.first as List<dynamic>;
    final BigInt role = userStruct[2] as BigInt;
    final bool inOrg = userStruct[3] as bool;

    if (role.toInt() != 1 || !inOrg) {
      throw Exception("‚ùå T√†i kho·∫£n n√†y kh√¥ng ph·∫£i l√† ch·ªß s·ªü h·ªØu t·ªï ch·ª©c.");
    }

    developer.log(
      "‚úÖ [OrgBloc] X√°c th·ª±c th√†nh c√¥ng: User l√† m·ªôt Organization Owner.",
    );
  }

  /// X·ª≠ l√Ω s·ª± ki·ªán fetch chi ti·∫øt t·ªï ch·ª©c
  Future<void> _onFetchDetails(
    FetchOrganizationDetails event,
    Emitter<OrganizationState> emit,
  ) async {
    emit(OrganizationLoading());
    try {
      await _initializeContract();
      await _checkIsOrganizationOwner();

      final result = await web3client.call(
        contract: deployedContract,
        function: _getOrganizationFunction,
        params: [credentials.address],
      );

      if (result.isEmpty || result.first is! List<dynamic>) {
        emit(OrganizationError("‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ contract kh√¥ng h·ª£p l·ªá."));
        return;
      }

      final rawOrg = result.first as List<dynamic>;
      final EthereumAddress ownerAddress = rawOrg[2] as EthereumAddress;
      const zeroAddress = "0x0000000000000000000000000000000000000000";

      if (ownerAddress.hex.toLowerCase() == zeroAddress) {
        emit(
          OrganizationError(
            "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu Organization cho t√†i kho·∫£n n√†y.",
          ),
        );
        return;
      }

      // 1. L·∫•y d·ªØ li·ªáu t·ªï ch·ª©c th√¥ t·ª´ Contract
      Organization org = Organization.fromContract(rawOrg);

      // 2. L·∫§Y D·ªÆ LI·ªÜU B·ªî SUNG T·ª™ FIREBASE
      developer.log(
        "üîé [Firebase] B·∫Øt ƒë·∫ßu t√¨m ki·∫øm document v·ªõi eth_address: ${org.ownerAddress}",
      );
      final firebaseData = await authService.getOrganizationDetailsByAddress(
        org.ownerAddress,
      );

      if (firebaseData != null) {
        developer.log(
          "‚úÖ [Firebase] ƒê√£ T√åM TH·∫§Y document tr√™n Firebase. B·∫Øt ƒë·∫ßu h·ª£p nh·∫•t d·ªØ li·ªáu.",
        );
        org = org.copyWith(
          brandName: firebaseData['brandName'] as String?,
          businessType: firebaseData['business type'] as String?,
          foundedYear: firebaseData['foundedYear'] as String?,
          address: firebaseData['address'] as String?,
          email: firebaseData['email'] as String?,
          phoneNumber: firebaseData['phoneNumber'] as String?,
          ownerName: firebaseData['fullName'] as String? ?? org.ownerName,
        );
        developer.log("‚úÖ [Merge] H·ª£p nh·∫•t d·ªØ li·ªáu th√†nh c√¥ng!");
      } else {
        developer.log(
          "‚ùå [Firebase] KH√îNG T√åM TH·∫§Y document n√†o tr√™n Firebase kh·ªõp v·ªõi ƒë·ªãa ch·ªâ v√≠: ${org.ownerAddress}",
        );
      }

      // 3. √Ånh x·∫° t√™n ng∆∞·ªùi d√πng cho t·ª´ng th√†nh vi√™n (Members)
      final List<User> membersWithNames = [];
      for (var member in org.members) {
        final memberUsername = await authService.getUsernameByAddress(
          member.userId,
        );
        membersWithNames.add(
          User(
            userId: member.userId,
            userName: memberUsername ?? "Member (Ch∆∞a c√≥ t√™n)",
            role: member.role,
          ),
        );
      }
      org = org.copyWith(members: membersWithNames);

      developer.log(
        "‚úÖ [OrgBloc] ƒê√£ t·∫£i xong th√¥ng tin t·ªï ch·ª©c: ${org.organizationName}",
      );
      emit(OrganizationLoaded(org));
    } catch (e) {
      developer.log("‚ùå [OrgBloc] L·ªói khi fetch chi ti·∫øt:", error: e);
      emit(OrganizationError(e.toString()));
    }
  }

  /// X·ª≠ l√Ω s·ª± ki·ªán th√™m th√†nh vi√™n m·ªõi (qua ƒë·ªãa ch·ªâ v√≠)
  Future<void> _onAddMember(
    AddMemberToOrganization event,
    Emitter<OrganizationState> emit,
  ) async {
    final currentState = state;
    if (currentState is! OrganizationLoaded) {
      emit(OrganizationLoading());
    }

    try {
      await _initializeContract();
      await _checkIsOrganizationOwner();

      final memberAddr = EthereumAddress.fromHex(event.memberAddress);

      final isRegisteredResult = await web3client.call(
        contract: deployedContract,
        function: _isRegisteredFunction,
        params: [memberAddr],
      );

      if (isRegisteredResult.isEmpty || !(isRegisteredResult.first as bool)) {
        emit(OrganizationError("‚ùå Th√†nh vi√™n n√†y ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n."));
        return;
      }

      final userData = await web3client.call(
        contract: deployedContract,
        function: _getUserFunction,
        params: [memberAddr],
      );

      if (userData.isEmpty) {
        emit(OrganizationError("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng n√†y."));
        return;
      }

      final userStruct = userData.first as List<dynamic>;
      final bool alreadyInOrg = userStruct[3] as bool;

      if (alreadyInOrg) {
        emit(
          OrganizationError("‚ö†Ô∏è Th√†nh vi√™n n√†y ƒë√£ thu·ªôc v·ªÅ m·ªôt t·ªï ch·ª©c kh√°c."),
        );
        return;
      }

      final txHash = await web3client.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: deployedContract,
          function: _addMemberFunction,
          parameters: [memberAddr],
        ),
        chainId: 1337,
      );

      developer.log("‚úÖ [OrgBloc] Giao d·ªãch th√™m th√†nh vi√™n ƒë√£ g·ª≠i: $txHash");
      emit(OrganizationActionSuccess("‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu th√™m th√†nh vi√™n."));
    } catch (e) {
      developer.log("‚ùå [OrgBloc] L·ªói khi th√™m th√†nh vi√™n:", error: e);
      emit(OrganizationError("L·ªói khi th√™m th√†nh vi√™n: ${e.toString()}"));
    } finally {
      if (currentState is OrganizationLoaded) {
        emit(currentState); // Quay l·∫°i tr·∫°ng th√°i loaded
      }
    }
  }

  /// X·ª≠ l√Ω s·ª± ki·ªán th√™m th√†nh vi√™n qua email
  Future<void> _onAddMemberByEmail(
    AddMemberByEmail event,
    Emitter<OrganizationState> emit,
  ) async {
    try {
      final targetUser = await authService.getUserWalletByEmail(event.email);

      if (targetUser == null) {
        emit(
          OrganizationError("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email: ${event.email}"),
        );
        return;
      }

      final memberAddress = targetUser['eth_address']!;
      final username = targetUser['username'];
      developer.log(
        "üì¨ [OrgBloc] Chu·∫©n b·ªã th√™m user $username ($memberAddress) v√†o t·ªï ch·ª©c",
      );

      add(AddMemberToOrganization(memberAddress));
    } catch (e) {
      developer.log(
        "‚ùå [OrgBloc] L·ªói khi th√™m th√†nh vi√™n b·∫±ng email:",
        error: e,
      );
      emit(
        OrganizationError(
          "L·ªói khi th√™m th√†nh vi√™n b·∫±ng email: ${e.toString()}",
        ),
      );
    }
  }

  /// X·ª≠ l√Ω s·ª± ki·ªán x√≥a th√†nh vi√™n (Owner removes Associate)
  Future<void> _onRemoveMember(
    RemoveMemberFromOrganization event,
    Emitter<OrganizationState> emit,
  ) async {
    final currentState = state;
    if (currentState is! OrganizationLoaded) {
      emit(OrganizationLoading());
    }

    try {
      await _initializeContract();
      await _checkIsOrganizationOwner(); // Ch·ªâ owner m·ªõi c√≥ quy·ªÅn x√≥a

      final associateAddress = EthereumAddress.fromHex(event.memberAddress);

      final txHash = await web3client.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: deployedContract,
          function: _removeMemberFunction,
          parameters: [associateAddress],
        ),
        chainId: 1337,
      );

      developer.log("‚úÖ [OrgBloc] Giao d·ªãch x√≥a th√†nh vi√™n ƒë√£ g·ª≠i: $txHash");
      emit(OrganizationActionSuccess("‚úÖ ƒê√£ x√≥a th√†nh vi√™n th√†nh c√¥ng."));
    } catch (e) {
      developer.log("‚ùå [OrgBloc] L·ªói khi x√≥a th√†nh vi√™n:", error: e);
      emit(OrganizationError("L·ªói khi x√≥a th√†nh vi√™n: ${e.toString()}"));
    } finally {
      if (currentState is OrganizationLoaded) {
        emit(currentState); // Quay l·∫°i tr·∫°ng th√°i loaded
      }
    }
  }
}
