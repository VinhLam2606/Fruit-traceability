// lib/scan/bloc/scan_bloc.dart
import 'dart:async';
import 'dart:convert';
import 'dart:developer' as developer;

import 'package:bloc/bloc.dart';
import 'package:flutter/services.dart';
import 'package:untitled/dashboard/model/product.dart';
import 'package:untitled/dashboard/model/productHistory.dart';
// === TH√äM M·ªöI: Import model timeline ===
import 'package:untitled/dashboard/model/timeline_item.dart';
import 'package:web3dart/web3dart.dart';

part 'scan_event.dart';
part 'scan_state.dart';

class ScanBloc extends Bloc<ScanEvent, ScanState> {
  final Web3Client web3client;
  final EthPrivateKey credentials;

  DeployedContract? _deployedContract;
  ContractFunction? _getProductFunction;
  ContractFunction? _getProductHistoryFunction;
  ContractFunction? _addProcessStepFunction;

  ScanBloc({
    required this.web3client,
    required this.credentials
  }) : super(ScanInitialState()) {
    on<ScanInitializeEvent>(_onInitialize);
    on<BarcodeScannedEvent>(_onBarcodeScannedEvent);
    on<FetchProductHistoryEvent>(_onFetchProductHistoryEvent); // <-- ƒê√£ vi·∫øt l·∫°i
    on<AddProcessStepEvent>(_onAddProcessStepEvent); // <-- ƒê√£ vi·∫øt l·∫°i

    add(ScanInitializeEvent());
  }

  FutureOr<void> _onInitialize(
      ScanInitializeEvent event, Emitter<ScanState> emit) async {
    try {
      final abiString = await rootBundle.loadString("build/contracts/Chain.json");
      final jsonAbi = jsonDecode(abiString);
      final abi = ContractAbi.fromJson(jsonEncode(jsonAbi['abi']), 'Chain');
      final networks = jsonAbi['networks'] as Map<String, dynamic>;
      final networkKey = networks.keys.first;
      final contractAddressHex = networks[networkKey]['address'] as String?;
      if (contractAddressHex == null || contractAddressHex.isEmpty) {
        throw Exception("‚ùå Kh√¥ng t√¨m th·∫•y contract address trong Chain.json.");
      }
      final contractAddress = EthereumAddress.fromHex(contractAddressHex);
      _deployedContract = DeployedContract(abi, contractAddress);
      _getProductFunction = _deployedContract!.function('getProduct');
      _getProductHistoryFunction = _deployedContract!.function('getProductHistory');
      _addProcessStepFunction = _deployedContract!.function('addProcessStep');
      developer.log("üìå ScanBloc Contract address loaded: $contractAddress");
    } catch (e, st) {
      developer.log("‚ùå [Init] ScanBloc error: $e", stackTrace: st);
      emit(ScanErrorState("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i."));
    }
  }

  FutureOr<void> _onBarcodeScannedEvent(
      BarcodeScannedEvent event,
      Emitter<ScanState> emit,
      ) async {
    if (_deployedContract == null || _getProductFunction == null) {
      emit(ScanErrorState("L·ªói: Contract ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.\nVui l√≤ng scan l·∫°i."));
      return;
    }
    emit(ScanLoadingState());
    final batchId = event.batchId;
    try {
      final deployedContract = _deployedContract!;
      final getProductFunction = _getProductFunction!;
      final result = await web3client.call(
        contract: deployedContract,
        function: getProductFunction,
        params: [batchId],
      );
      if (result.isEmpty || result.first is! List) {
        throw Exception("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ blockchain.");
      }
      final rawProductData = result.first as List<dynamic>;
      final product = Product.fromContract(rawProductData);
      developer.log("‚úÖ Loaded Product: ${product.name} (Batch: $batchId)");
      emit(ProductInfoLoadedState(product: product));
    } catch (e, st) {
      developer.log("‚ùå [GetProduct] Failed", error: e, stackTrace: st);
      emit(ScanErrorState("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m. Vui l√≤ng qu√©t l·∫°i m√£."));
    }
  }

  // === THAY ƒê·ªîI L·ªöN: VI·∫æT L·∫†I HO√ÄN TO√ÄN H√ÄM N√ÄY ===
  FutureOr<void> _onFetchProductHistoryEvent(
      FetchProductHistoryEvent event,
      Emitter<ScanState> emit,
      ) async {
    // Ki·ªÉm tra t·∫•t c·∫£ c√°c h√†m c·∫ßn thi·∫øt
    if (_deployedContract == null ||
        _getProductHistoryFunction == null ||
        _getProductFunction == null) {
      emit(ScanErrorState(
          "L·ªói: Contract ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.\nVui l√≤ng scan l·∫°i."));
      return;
    }

    if (state is! ProductInfoLoadedState) return;

    final currentState = state as ProductInfoLoadedState;
    final deployedContract = _deployedContract!;
    final getProductHistoryFunction = _getProductHistoryFunction!;
    final getProductFunction = _getProductFunction!; // C·∫ßn h√†m n√†y ƒë·ªÉ l·∫•y processSteps

    emit(ProductHistoryLoadingState(
      product: currentState.product,
      history: currentState.history,
      historyErrorMessage: null,
    ));

    try {
      // === B∆Ø·ªöC 1: T·∫£i c·∫£ hai danh s√°ch C√ôNG L√öC ===

      // T·∫£i L·ªãch s·ª≠ (ProductHistory[])
      final historyResultFuture = web3client.call(
        contract: deployedContract,
        function: getProductHistoryFunction,
        params: [event.batchId],
        sender: credentials.address,
      );

      // T·∫£i S·∫£n ph·∫©m (ƒë·ªÉ l·∫•y ProcessStep[] chi ti·∫øt)
      final productResultFuture = web3client.call(
        contract: deployedContract,
        function: getProductFunction,
        params: [event.batchId],
      );

      // Ch·ªù c·∫£ hai ho√†n t·∫•t
      final results = await Future.wait([historyResultFuture, productResultFuture]);

      // === B∆Ø·ªöC 2: Parse k·∫øt qu·∫£ ===

      // Parse History
      final rawHistory = (results[0] as List).first as List;
      final historyEvents = rawHistory
          .map((h) => (h is List) ? ProductHistory.fromContract(h) : null)
          .whereType<ProductHistory>()
          .toList();

      // Parse Product v√† l·∫•y ProcessSteps
      final rawProductData = (results[1] as List).first as List<dynamic>;
      final Product freshProduct = Product.fromContract(rawProductData);
      final List<ProcessStep> processSteps = freshProduct.processSteps;

      developer.log("‚úÖ Loaded ${historyEvents.length} history items.");
      developer.log("‚úÖ Loaded ${processSteps.length} process steps.");

      // === B∆Ø·ªöC 3: G·ªôp (Merge) hai danh s√°ch ===

      // T·∫°o Map ƒë·ªÉ tra c·ª©u ProcessStep b·∫±ng timestamp (BigInt)
      // `date` trong ProcessStep ƒë∆∞·ª£c g√°n b·∫±ng `block.timestamp`
      final Map<BigInt, ProcessStep> processDetailsMap = {
        for (var step in processSteps) step.date: step
      };

      List<TimelineItem> timelineItems = [];

      for (var historyEvent in historyEvents) {
        // `timestamp` trong ProductHistory c≈©ng ƒë∆∞·ª£c g√°n b·∫±ng `block.timestamp`
        final BigInt timestamp = historyEvent.timestamp;

        // N·∫øu l√† Processed...
        if (historyEvent.type == HistoryType.processed) {
          // ...th·ª≠ t√¨m th√¥ng tin chi ti·∫øt c·ªßa n√≥ trong Map
          final ProcessStep? matchingDetail = processDetailsMap[timestamp];

          if (matchingDetail != null) {
            // üü† T√¨m th·∫•y! Th√™m ProcessEventItem (vi·ªÅn cam)
            timelineItems.add(ProcessEventItem(matchingDetail));
            // X√≥a kh·ªèi map ƒë·ªÉ tr√°nh tr√πng l·∫∑p (n·∫øu c·∫ßn)
            processDetailsMap.remove(timestamp);
          } else {
            // Kh√¥ng t√¨m th·∫•y chi ti·∫øt (l·ªói hi·∫øm g·∫∑p)
            developer.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ProcessStep chi ti·∫øt cho timestamp $timestamp");
            // V·∫´n th√™m s·ª± ki·ªán g·ªëc (vi·ªÅn xanh)
            timelineItems.add(HistoryEventItem(historyEvent));
          }
        }
        // N·∫øu l√† Create ho·∫∑c Transfer...
        else {
          // üîµ Th√™m HistoryEventItem (vi·ªÅn xanh)
          timelineItems.add(HistoryEventItem(historyEvent));
        }
      }

      // S·∫Øp x·∫øp l·∫°i danh s√°ch cu·ªëi c√πng theo timestamp (tƒÉng d·∫ßn)
      timelineItems.sort((a, b) => a.timestamp.compareTo(b.timestamp));

      // === B∆Ø·ªöC 4: Emit state cu·ªëi c√πng ===
      emit(ProductDetailsLoadedState(
        product: freshProduct, // D√πng product m·ªõi nh·∫•t
        timeline: timelineItems, // D√πng timeline ƒë√£ g·ªôp
      ));

    } catch (e, st) {
      developer.log("‚ùå [GetProductHistory/Merge] Failed", error: e, stackTrace: st);
      emit(currentState.copyWith(
        historyErrorMessage: "‚ùå Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.",
      ));
    }
  }

  // === THAY ƒê·ªîI: T·ªëi ∆∞u logic refresh ===
  FutureOr<void> _onAddProcessStepEvent(
      AddProcessStepEvent event, Emitter<ScanState> emit) async {
    if (state is! ProductInfoLoadedState) return;
    final currentState = state as ProductInfoLoadedState;

    // Hi·ªÉn th·ªã loading, nh∆∞ng gi·ªØ nguy√™n n·ªôi dung c≈©
    emit(ProductHistoryLoadingState(
        product: currentState.product,
        history: currentState.history
    ));

    try {
      final txHash = await web3client.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: _deployedContract!,
          function: _addProcessStepFunction!,
          parameters: [
            event.batchId,
            event.processName,
            BigInt.from(event.processType),
            event.description,
          ],
        ),
        chainId: 1337, // ƒê·∫£m b·∫£o chainId c·ªßa b·∫°n (v√≠ d·ª•: 1337 cho Ganache)
      );
      developer.log("‚úÖ Process step added! TxHash: $txHash");

      // === LOGIC REFRESH TH√îNG MINH ===
      // 1. T·∫£i l·∫°i s·∫£n ph·∫©m (ƒë·ªÉ c·∫≠p nh·∫≠t `status` v√† `processSteps`)
      add(BarcodeScannedEvent(event.batchId));

      // 2. Ch·ªù BLoC x·ª≠ l√Ω xong BarcodeScannedEvent (tr·ªü v·ªÅ state ProductInfoLoadedState)
      //    r·ªìi M·ªöI t·∫£i timeline (ƒë√£ bao g·ªìm process m·ªõi)
      stream.firstWhere((state) => state is ProductInfoLoadedState && state.product.batchId == event.batchId)
          .then((_) {
        if (!isClosed) {
          // 3. Gi·ªù th√¨ t·∫£i timeline ƒë√£ g·ªôp
          add(FetchProductHistoryEvent(event.batchId));
        }
      });

    } catch (e, st) {
      developer.log("‚ùå [AddProcessStep] Failed", error: e, stackTrace: st);
      emit(currentState.copyWith(
          historyErrorMessage: "‚ùå Kh√¥ng th·ªÉ th√™m quy tr√¨nh. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p."));
    }
  }
}