// lib/scan/bloc/scan_bloc.dart
import 'dart:async';
import 'dart:convert';
import 'dart:developer' as developer;

import 'package:bloc/bloc.dart';
import 'package:flutter/services.dart';
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n import Product v√† ProductHistory l√† ch√≠nh x√°c
import 'package:untitled/dashboard/model/product.dart';
import 'package:untitled/dashboard/model/productHistory.dart';
import 'package:web3dart/web3dart.dart';

part 'scan_event.dart';
part 'scan_state.dart';

class ScanBloc extends Bloc<ScanEvent, ScanState> {
  final Web3Client web3client;
  final EthPrivateKey credentials;


  DeployedContract? _deployedContract;
  ContractFunction? _getProductFunction;
  ContractFunction? _getProductHistoryFunction;
  ContractFunction? _updateProductDescriptionFunction;

  ScanBloc({
    required this.web3client,
    required this.credentials
  }) : super(ScanInitialState()) {
    on<ScanInitializeEvent>(_onInitialize);
    on<BarcodeScannedEvent>(_onBarcodeScannedEvent);
    on<FetchProductHistoryEvent>(_onFetchProductHistoryEvent);
    on<UpdateProductDescriptionEvent>(_onUpdateProductDescriptionEvent);

    add(ScanInitializeEvent());
  }

  /// X·ª≠ l√Ω Event kh·ªüi t·∫°o Bloc v√† t·∫£i Contract ABI/Address.
  FutureOr<void> _onInitialize(
      ScanInitializeEvent event, Emitter<ScanState> emit) async {
    try {
      final abiString = await rootBundle.loadString("build/contracts/Chain.json");
      final jsonAbi = jsonDecode(abiString);
      final abi = ContractAbi.fromJson(jsonEncode(jsonAbi['abi']), 'Chain');

      final networks = jsonAbi['networks'] as Map<String, dynamic>;
      final networkKey = networks.keys.first;
      final contractAddressHex = networks[networkKey]['address'] as String?;

      if (contractAddressHex == null || contractAddressHex.isEmpty) {
        throw Exception("‚ùå Kh√¥ng t√¨m th·∫•y contract address trong Chain.json.");
      }

      final contractAddress = EthereumAddress.fromHex(contractAddressHex);
      _deployedContract = DeployedContract(abi, contractAddress);

      _getProductFunction = _deployedContract!.function('getProduct');
      _getProductHistoryFunction = _deployedContract!.function('getProductHistory');
      _updateProductDescriptionFunction = _deployedContract!.function('updateProductDescription');

      developer.log("üìå ScanBloc Contract address loaded: $contractAddress");

    } catch (e, st) {
      developer.log("‚ùå [Init] ScanBloc error: $e", stackTrace: st);
      emit(ScanErrorState("L·ªói kh·ªüi t·∫°o contract: ${e.toString()}"));
    }
  }

  FutureOr<void> _onBarcodeScannedEvent(
      BarcodeScannedEvent event,
      Emitter<ScanState> emit,
      ) async {
    if (_deployedContract == null || _getProductFunction == null) {
      emit(ScanErrorState("L·ªói: Contract ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.\nVui l√≤ng scan l·∫°i."));
      return;
    }

    emit(ScanLoadingState());
    final batchId = event.batchId;

    try {
      final deployedContract = _deployedContract!;
      final getProductFunction = _getProductFunction!;

      // 1. G·ªçi getProduct(batchId)
      final result = await web3client.call(
        contract: deployedContract,
        function: getProductFunction,
        params: [batchId],
      );

      if (result.isEmpty || result.first is! List) {
        throw Exception("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ blockchain.");
      }

      final rawProductData = result.first as List<dynamic>;
      final product = Product.fromContract(rawProductData);

      developer.log("‚úÖ Loaded Product: ${product.name} (Batch: $batchId)");

      emit(ProductInfoLoadedState(product: product));

    } catch (e, st) {
      developer.log("‚ùå [GetProduct] Failed", error: e, stackTrace: st);
      emit(ScanErrorState("‚ùå L·ªói l·∫•y th√¥ng tin s·∫£n ph·∫©m: ${e.toString()}"));
    }
  }

  /// X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t chi ti·∫øt: G·ªçi getProductHistory.
  FutureOr<void> _onFetchProductHistoryEvent(
      FetchProductHistoryEvent event,
      Emitter<ScanState> emit,
      ) async {
    if (_deployedContract == null || _getProductHistoryFunction == null) {
      emit(ScanErrorState("L·ªói: Contract ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.\nVui l√≤ng scan l·∫°i."));
      return;
    }

    // Ch·ªâ t·∫£i l·ªãch s·ª≠ khi ƒë√£ c√≥ th√¥ng tin s·∫£n ph·∫©m
    if (state is! ProductInfoLoadedState) return;

    final currentState = state as ProductInfoLoadedState;
    final deployedContract = _deployedContract!;
    final getProductHistoryFunction = _getProductHistoryFunction!;

    emit(ProductHistoryLoadingState(
      product: currentState.product,
      history: currentState.history,
      historyErrorMessage: null,
    ));

    try {
      // ‚úÖ S·ª¨A ƒê·ªîI T·∫†I ƒê√ÇY: Th√™m `from: credentials.address`
      // This ensures `msg.sender` is set for the contract call, allowing it
      // to check if the user is registered.
      final result = await web3client.call(
        contract: deployedContract,
        function: getProductHistoryFunction,
        params: [event.batchId],
        sender: credentials.address,
      );

      final rawHistory = result.first as List;
      final history = rawHistory
          .map((h) => (h is List) ? ProductHistory.fromContract(h) : null)
          .whereType<ProductHistory>()
          .toList();

      developer.log("‚úÖ Loaded ${history.length} product history items.");

      emit(ProductDetailsLoadedState(
        product: currentState.product,
        history: history,
        historyErrorMessage: null,
      ));

    } catch (e, st) {
      developer.log("‚ùå [GetProductHistory] Failed", error: e, stackTrace: st);

      emit(currentState.copyWith(
        historyErrorMessage: "‚ùå L·ªói t·∫£i l·ªãch s·ª≠ s·∫£n ph·∫©m: ${e.toString()}",
      ));
    }
  }

  FutureOr<void> _onUpdateProductDescriptionEvent(
      UpdateProductDescriptionEvent event, Emitter<ScanState> emit) async {
    if (state is! ProductInfoLoadedState) return;
    final currentState = state as ProductInfoLoadedState;

    emit(ProductHistoryLoadingState(
        product: currentState.product, history: currentState.history));

    try {
      final txHash = await web3client.sendTransaction(
        credentials,
        Transaction.callContract(
          contract: _deployedContract!,
          function: _updateProductDescriptionFunction!,
          parameters: [event.batchId, event.description],
        ),
        chainId: 1337,
      );
      developer.log("‚úÖ Product info updated! TxHash: $txHash");
      // Sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng, t·ª± ƒë·ªông t·∫£i l·∫°i l·ªãch s·ª≠ ƒë·ªÉ th·∫•y thay ƒë·ªïi
      add(FetchProductHistoryEvent(event.batchId));
    } catch (e, st) {
      developer.log("‚ùå [UpdateProduct] Failed", error: e, stackTrace: st);
      emit(currentState.copyWith(
          historyErrorMessage: "‚ùå L·ªói c·∫≠p nh·∫≠t: ${e.toString()}"));
    }
  }
}